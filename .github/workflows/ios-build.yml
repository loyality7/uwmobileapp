name: iOS Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build iOS App
    runs-on: macos-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set Up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install Yarn
      run: npm install -g yarn

    - name: Install Dependencies
      run: yarn install --frozen-lockfile

    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Install CocoaPods
      run: |
        cd ios
        pod install --repo-update

    - name: Fix DateTimePicker
      run: |
        cd node_modules/@react-native-community/datetimepicker/ios
        sed -i '' 's/YGNodeConstRef/YGNodeRef/g' RNDateTimePickerShadowView.m
        sed -i '' 's/const struct YGNode \*/struct YGNode \*/g' RNDateTimePickerShadowView.m

    - name: Build iOS App
      env:
        NO_FLIPPER: 1
      run: |
        cd ios
        # Archive the app
        xcodebuild \
          -workspace BoxMobileApp.xcworkspace \
          -scheme BoxMobileApp \
          -configuration Release \
          -archivePath build/BoxMobileApp.xcarchive \
          archive \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          CODE_SIGNING_REQUIRED=YES \
          CODE_SIGNING_ALLOWED=YES
        
        # Export IPA
        xcodebuild \
          -exportArchive \
          -archivePath build/BoxMobileApp.xcarchive \
          -exportPath build/BoxMobileApp.ipa \
          -exportOptionsPlist exportOptions.plist

    - name: Upload Build Artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: |
          ios/build/
          !ios/build/**/intermediates/**
        retention-days: 5 

    - name: Install Apple Certificate
      if: success()
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.MYAPP_UPLOAD_IOS_CERTIFICATE }}
        P12_PASSWORD: ${{ secrets.MYAPP_UPLOAD_IOS_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MYAPP_UPLOAD_IOS_PROFILE }}
        KEYCHAIN_PASSWORD: ${{ secrets.MYAPP_UPLOAD_IOS_KEYCHAIN }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles 